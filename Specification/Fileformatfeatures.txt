Required for beatmap:
BPM
BPS (calculated from BPM)

(if BPM isn't specified already)
BPM = number of beats in song times 60 divided by the number of seconds in song
in code:
BPM = (num beats in song) * 60 / (num secs in song)

"The BPM provides a foundation on which you can start testing for user inputs."


Songs are assumed to be in commom time (4/4), which is needed for input accuracy
(eighth-note does well, but sixteenth/sixty-fourth is for more complicated beatmaps)


For constant press levels:
Every note should appear in an array.


If using sixteenth notes as a input sequenceâ€™s precision:
Array beats = [ 4, 8, 12 ]; // 1st, 2nd, 3rd quarter note


For each quarter note, there are four sixteenth notes.  The array above says to detect the first, second and third sixteenth-note of each bar, so each value (quarter note) is multplied by four to get its corresponding value in sixteenth notes.

To calculate note position:
nth sixteenth-note = (time in secs in song) * BPM * (1/60) * (num_vals_per_beat)

Quoted from Illogictree:
"Every time the user hits a button, you must calculate which note (or which sixteenth note in our funk drum-loop example) the input corresponds to. To calculate that, you must know when, in the local time of the song, the button was pressed. What I mean by local time is the current time in the song that your game state is currently at. Say your song loop is only 10 seconds long but the game has elapsed a total time of 14 seconds. That means the local time of the song loop is 14-10=4 seconds."

Example, we calculate the nth sixteenth note with a local time of 1.5 and a BPM of 50 with 4 sixteenth notes per beat:
// BPM = 50, secs = 4, num_vals_per_beat = 4
nth sixteenth-note = (1.5) * 50 * (1/60) * (4) = 5

formula:
nth sixteenth-note = (time in secs in song) * BPM * (1/60) * (num_vals_per_beat)


A buffer can be most likely set with ctrulib's u64 osGetTime(void); (os.h file), since it's virtually impossible to press it at the exact time.
